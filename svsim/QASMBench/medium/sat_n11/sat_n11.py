import sys
sys.path.insert(0,'../../../build/')
import libsvsim as svsim

if (len(sys.argv) != 3):
	print('$python circuit.py n_qubits n_cores')
	exit()

sim = svsim.Simulation(int(sys.argv[1]), int(sys.argv[2]))

# Quantum code for the specified SAT problem.
# Declare all needed (qu)bits
# Prepare uniform superposition
sim.append(sim.H(1))
sim.append(sim.H(2))
sim.append(sim.H(3))
sim.append(sim.H(4))
# Marking with oracle evaluation
sim.append(sim.X(5))
sim.append(sim.X(6))
sim.append(sim.X(7))
sim.append(sim.X(8))
sim.append(sim.X(4))
sim.append(sim.CCX(1, 2, 9))
sim.append(sim.CCX(3, 9, 10))
sim.append(sim.CCX(4, 10, 5))
sim.append(sim.CCX(3, 9, 10))
sim.append(sim.CCX(1, 2, 9))
sim.append(sim.X(2))
sim.append(sim.X(3))
sim.append(sim.X(4))
sim.append(sim.CCX(1, 2, 9))
sim.append(sim.CCX(3, 9, 10))
sim.append(sim.CCX(4, 10, 6))
sim.append(sim.CCX(3, 9, 10))
sim.append(sim.CCX(1, 2, 9))
sim.append(sim.X(1))
sim.append(sim.X(2))
sim.append(sim.CCX(1, 2, 9))
sim.append(sim.CCX(3, 9, 10))
sim.append(sim.CCX(4, 10, 7))
sim.append(sim.CCX(3, 9, 10))
sim.append(sim.CCX(1, 2, 9))
sim.append(sim.X(1))
sim.append(sim.X(2))
sim.append(sim.CCX(2, 3, 8))
sim.append(sim.X(2))
sim.append(sim.X(3))
sim.append(sim.CCX(5, 6, 9))
sim.append(sim.CCX(7, 9, 10))
sim.append(sim.CCX(8, 10, 0))
sim.append(sim.CCX(7, 9, 10))
sim.append(sim.CCX(5, 6, 9))
sim.append(sim.X(2))
sim.append(sim.X(3))
sim.append(sim.CCX(2, 3, 8))
sim.append(sim.X(1))
sim.append(sim.X(2))
sim.append(sim.CCX(1, 2, 9))
sim.append(sim.CCX(3, 9, 10))
sim.append(sim.CCX(4, 10, 7))
sim.append(sim.CCX(3, 9, 10))
sim.append(sim.CCX(1, 2, 9))
sim.append(sim.X(1))
sim.append(sim.X(2))
sim.append(sim.CCX(1, 2, 9))
sim.append(sim.CCX(3, 9, 10))
sim.append(sim.CCX(4, 10, 6))
sim.append(sim.CCX(3, 9, 10))
sim.append(sim.CCX(1, 2, 9))
sim.append(sim.X(2))
sim.append(sim.X(3))
sim.append(sim.X(4))
sim.append(sim.CCX(1, 2, 9))
sim.append(sim.CCX(3, 9, 10))
sim.append(sim.CCX(4, 10, 5))
sim.append(sim.CCX(3, 9, 10))
sim.append(sim.CCX(1, 2, 9))
sim.append(sim.X(4))
# Amplitude amplification
sim.append(sim.H(1))
sim.append(sim.H(2))
sim.append(sim.H(3))
sim.append(sim.H(4))
sim.append(sim.X(0))
sim.append(sim.X(1))
sim.append(sim.X(2))
sim.append(sim.X(3))
sim.append(sim.X(4))
sim.append(sim.H(0))
sim.append(sim.CCX(1, 2, 9))
sim.append(sim.CCX(3, 9, 10))
sim.append(sim.CCX(4, 10, 0))
sim.append(sim.CCX(3, 9, 10))
sim.append(sim.CCX(1, 2, 9))
sim.append(sim.H(0))
sim.append(sim.X(0))
sim.append(sim.X(1))
sim.append(sim.X(2))
sim.append(sim.X(3))
sim.append(sim.X(4))
sim.append(sim.H(0))
sim.append(sim.H(1))
sim.append(sim.H(2))
sim.append(sim.H(3))
sim.append(sim.H(4))
# Measurements

sim.upload()
sim.run()
