import sys
sys.path.insert(0,'../../../build/')
import libsvsim as svsim

if (len(sys.argv) != 3):
	print('$python circuit.py n_qubits n_cores')
	exit()

sim = svsim.Simulation(int(sys.argv[1]), int(sys.argv[2]))

# initialize ancilla qubits
sim.append(sim.H(0))
sim.append(sim.H(1))
sim.append(sim.H(2))
sim.append(sim.H(3))
sim.append(sim.H(4))
sim.append(sim.H(5))
sim.append(sim.H(6))
sim.append(sim.H(7))
sim.append(sim.H(8))
sim.append(sim.H(9))
# eigenstate of the unitary operator: 21 (10101)
sim.append(sim.X(10))
sim.append(sim.X(12))
sim.append(sim.X(14))
sim.append(sim.CCX(9, 10, 12))
sim.append(sim.CCX(11, 12, 13))
sim.append(sim.CZ(13, 14))
sim.append(sim.CCX(11, 12, 13))
sim.append(sim.CCX(9, 10, 12))
sim.append(sim.CU1(-0.006135923151542565, 9, 0))
sim.append(sim.CU1(-0.01227184630308513, 9, 1))
sim.append(sim.CU1(-0.02454369260617026, 9, 2))
sim.append(sim.CU1(-0.04908738521234052, 9, 3))
sim.append(sim.CU1(-0.09817477042468103, 9, 4))
sim.append(sim.CU1(-0.19634954084936207, 9, 5))
sim.append(sim.CU1(-0.39269908169872414, 9, 6))
sim.append(sim.CU1(-0.7853981633974483, 9, 7))
sim.append(sim.CU1(-1.5707963267948966, 9, 8))
sim.append(sim.CU1(-0.01227184630308513, 8, 0))
sim.append(sim.CU1(-0.02454369260617026, 8, 1))
sim.append(sim.CU1(-0.04908738521234052, 8, 2))
sim.append(sim.CU1(-0.09817477042468103, 8, 3))
sim.append(sim.CU1(-0.19634954084936207, 8, 4))
sim.append(sim.CU1(-0.39269908169872414, 8, 5))
sim.append(sim.CU1(-0.7853981633974483, 8, 6))
sim.append(sim.CU1(-1.5707963267948966, 8, 7))
sim.append(sim.CU1(-0.02454369260617026, 7, 0))
sim.append(sim.CU1(-0.04908738521234052, 7, 1))
sim.append(sim.CU1(-0.09817477042468103, 7, 2))
sim.append(sim.CU1(-0.19634954084936207, 7, 3))
sim.append(sim.CU1(-0.39269908169872414, 7, 4))
sim.append(sim.CU1(-0.7853981633974483, 7, 5))
sim.append(sim.CU1(-1.5707963267948966, 7, 6))
sim.append(sim.CU1(-0.04908738521234052, 6, 0))
sim.append(sim.CU1(-0.09817477042468103, 6, 1))
sim.append(sim.CU1(-0.19634954084936207, 6, 2))
sim.append(sim.CU1(-0.39269908169872414, 6, 3))
sim.append(sim.CU1(-0.7853981633974483, 6, 4))
sim.append(sim.CU1(-1.5707963267948966, 6, 5))
sim.append(sim.CU1(-0.09817477042468103, 5, 0))
sim.append(sim.CU1(-0.19634954084936207, 5, 1))
sim.append(sim.CU1(-0.39269908169872414, 5, 2))
sim.append(sim.CU1(-0.7853981633974483, 5, 3))
sim.append(sim.CU1(-1.5707963267948966, 5, 4))
sim.append(sim.CU1(-0.19634954084936207, 4, 0))
sim.append(sim.CU1(-0.39269908169872414, 4, 1))
sim.append(sim.CU1(-0.7853981633974483, 4, 2))
sim.append(sim.CU1(-1.5707963267948966, 4, 3))
sim.append(sim.CU1(-0.39269908169872414, 3, 0))
sim.append(sim.CU1(-0.7853981633974483, 3, 1))
sim.append(sim.CU1(-1.5707963267948966, 3, 2))
sim.append(sim.CU1(-0.7853981633974483, 2, 0))
sim.append(sim.CU1(-1.5707963267948966, 2, 1))
sim.append(sim.CU1(-1.5707963267948966, 1, 0))
sim.append(sim.H(0))
#measure q[0] -> c[0];
sim.append(sim.H(1))
#measure q[1] -> c[1];
sim.append(sim.H(2))
#measure q[2] -> c[2];
sim.append(sim.H(3))
#measure q[3] -> c[3];
sim.append(sim.H(4))
#measure q[4] -> c[4];
sim.append(sim.H(5))
#measure q[5] -> c[5];
sim.append(sim.H(6))
#measure q[6] -> c[6];
sim.append(sim.H(7))
sim.append(sim.H(8))
sim.append(sim.H(9))

sim.upload()
sim.run()
