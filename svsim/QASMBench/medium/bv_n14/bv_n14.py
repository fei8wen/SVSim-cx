import sys
sys.path.insert(0,'../../../build/')
import libsvsim as svsim

if (len(sys.argv) != 3):
	print('$python circuit.py n_qubits n_cores')
	exit()

sim = svsim.Simulation(int(sys.argv[1]), int(sys.argv[2]))

#@author Raymond Harry Rudy rudyhar@jp.ibm.com
#Bernstein-Vazirani with 14 qubits.
#Hidden string is 1111111111111
sim.append(sim.H(0))
sim.append(sim.H(1))
sim.append(sim.H(2))
sim.append(sim.H(3))
sim.append(sim.H(4))
sim.append(sim.H(5))
sim.append(sim.H(6))
sim.append(sim.H(7))
sim.append(sim.H(8))
sim.append(sim.H(9))
sim.append(sim.H(10))
sim.append(sim.H(11))
sim.append(sim.H(12))
sim.append(sim.X(13))
sim.append(sim.H(13))
sim.append(sim.CX(0, 13))
sim.append(sim.CX(1, 13))
sim.append(sim.CX(2, 13))
sim.append(sim.CX(3, 13))
sim.append(sim.CX(4, 13))
sim.append(sim.CX(5, 13))
sim.append(sim.CX(6, 13))
sim.append(sim.CX(7, 13))
sim.append(sim.CX(8, 13))
sim.append(sim.CX(9, 13))
sim.append(sim.CX(10, 13))
sim.append(sim.CX(11, 13))
sim.append(sim.CX(12, 13))
sim.append(sim.H(0))
sim.append(sim.H(1))
sim.append(sim.H(2))
sim.append(sim.H(3))
sim.append(sim.H(4))
sim.append(sim.H(5))
sim.append(sim.H(6))
sim.append(sim.H(7))
sim.append(sim.H(8))
sim.append(sim.H(9))
sim.append(sim.H(10))
sim.append(sim.H(11))
sim.append(sim.H(12))

sim.upload()
sim.run()
